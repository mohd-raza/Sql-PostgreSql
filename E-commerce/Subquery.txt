// Subqueries in a SELECT QUERY:-

Any subquery that results in a single value,row,column

EG: SELECT
  name,
  price,(
    SELECT
      MAX(price)
    FROM
      products
  )
FROM
  products
WHERE
  price > 867

// Subqueries in a FROM QUERY:-
it should have an alias 
also must be compatible

we can also return one single value if we *
EG1:
SELECT
  name,
  price_weight_ratio
FROM(
    SELECT
      name,
      price / weight AS price_weight_ratio
    FROM
      products
  ) AS p
WHERE
  price_weight_ratio > 86;


// Find the average number of orders for all users
sol: SELECT
  AVG(order_count)
FROM(
    SELECT
      user_id,
      COUNT(*) as order_count
    FROM
      orders
    GROUP BY
      user_id
  ) AS p

// Subqueries in a JOIN QUERY:-
Any subquery that returns data compatible with the ON CLAUSE

Not very useful in below example
EG:SELECT
  first_name
FROM
  users
  JOIN (
    SELECT
      user_id
    FROM
      orders
    WHERE
      product_id = 3
  ) AS o ON o.user_id = users.id;

// Subqueries in a WHERE QUERY:-

// >,<,>=,<=,<>,!= must return a single value
// IN, NOT IN,ALL,SOME,ANY keyword must return with a single COLUMN

show the id of order that involve a product with a price/weight
ratio greater than 5
Soln: SELECT
  id
FROM
  orders
WHERE
  product_id IN(
    SELECT
      id
    FROM
      products
    WHERE
      price / weight > 50
  );

show the name of all products with a price greater than 
the average product price
Soln:
SELECT
  name
FROM
  products
WHERE
  price > (
    SELECT
      AVG(price)
    FROM
      products
  )

//NOT IN
show the name of all products that are not in the same department 
as products with a price less than 100
Soln:SELECT
  name,
  department
FROM
  products
WHERE
  department NOT IN(
    SELECT
      department
    FROM
      products
    WHERE
      price < 100
  );

// ALL
show the name,dept,and price of products that are more expensive
than all products in the industrial dept
Soln:SELECT name,department,price
FROM products
WHERE price > ALL(
  SELECT price
  FROM products
  WHERE department = 'Industrial'
);


//Correlated Query

Show the name,dept and price of the most
expensive product in each dept
soln:SELECT name,department,price
FROM products AS p1
WHERE p1.price = (
  SELECT MAX(price)
  FROM products as p2
  WHERE p1.department = p2.department
);

without using a join or a group by,
print the number of orders for each product

soln:
SELECT p1.name,(
	SELECT COUNT(*)
  FROM orders as o1
  WHERE o1.product_id = p1.id
)
FROM products as p1;